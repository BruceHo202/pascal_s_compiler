============updatedMarkTable===============
i:1  keyword  program 
i:2  id  dyaares 
i:3  DeMark  ( 
i:4  id  input 
i:5  DeMark  , 
i:6  id  output 
i:7  DeMark  ) 
i:8  DeMark  ; 
i:9  keyword  const 
i:10  id  aa 
i:11  signal  = 
i:12  num  5 
i:13  DeMark  ; 
i:14  id  bb 
i:15  signal  = 
i:16  num  11 
i:17  DeMark  ; 
i:18  id  cc 
i:19  signal  = 
i:20  S_DeMark  ' 
i:21  letter  a 
i:22  S_DeMark  ' 
i:23  DeMark  ; 
i:24  keyword  type 
i:25  id  symbol 
i:26  signal  = 
i:27  keyword  integer 
i:28  DeMark  ; 
i:29  id  symbol2 
i:30  signal  = 
i:31  keyword  real 
i:32  DeMark  ; 
i:33  keyword  var 
i:34  id  m 
i:35  DeMark  : 
i:36  keyword  integer 
i:37  DeMark  ; 
i:38  id  r 
i:39  DeMark  : 
i:40  keyword  record 
i:41  id  a 
i:42  DeMark  : 
i:43  keyword  real 
i:44  DeMark  ; 
i:45  id  b 
i:46  DeMark  : 
i:47  keyword  array 
i:48  DeMark  [ 
i:49  num  5 
i:50  Sub_D_mark  .. 
i:51  num  11 
i:52  DeMark  , 
i:53  num  1 
i:54  Sub_D_Mark  .. 
i:55  num  5 
i:56  DeMark  ] 
i:57  keyword  of 
i:58  keyword  record 
i:59  id  a 
i:60  DeMark  : 
i:61  keyword  real 
i:62  keyword  end 
i:63  keyword  end 
i:64  DeMark  ; 
i:65  id  ch 
i:66  DeMark  , 
i:67  id  ch2 
i:68  DeMark  : 
i:69  keyword  char 
i:70  DeMark  ; 
i:71  id  int 
i:72  DeMark  , 
i:73  id  int2 
i:74  DeMark  : 
i:75  keyword  integer 
i:76  DeMark  ; 
i:77  id  bol 
i:78  DeMark  , 
i:79  id  bol2 
i:80  DeMark  : 
i:81  keyword  Boolean 
i:82  DeMark  ; 
i:83  id  rea 
i:84  DeMark  , 
i:85  id  rea2 
i:86  DeMark  : 
i:87  keyword  real 
i:88  DeMark  ; 
i:89  id  j 
i:90  DeMark  : 
i:91  keyword  integer 
i:92  DeMark  ; 
i:93  id  test4 
i:94  DeMark  : 
i:95  keyword  array 
i:96  DeMark  [ 
i:97  S_DeMark  ' 
i:98  letter  a 
i:99  S_DeMark  ' 
i:100  Sub_D_mark  .. 
i:101  S_DeMark  ' 
i:102  letter  b 
i:103  S_DeMark  ' 
i:104  DeMark  ] 
i:105  keyword  of 
i:106  keyword  integer 
i:107  DeMark  ; 
i:108  id  test5 
i:109  DeMark  : 
i:110  keyword  array 
i:111  DeMark  [ 
i:112  S_DeMark  ' 
i:113  letter  a 
i:114  S_DeMark  ' 
i:115  Sub_D_mark  .. 
i:116  S_DeMark  ' 
i:117  letter  b 
i:118  S_DeMark  ' 
i:119  DeMark  , 
i:120  num  1 
i:121  Sub_D_Mark  .. 
i:122  num  2 
i:123  DeMark  ] 
i:124  keyword  of 
i:125  keyword  integer 
i:126  DeMark  ; 
i:127  id  n 
i:128  DeMark  , 
i:129  id  i 
i:130  DeMark  : 
i:131  keyword  integer 
i:132  DeMark  ; 
i:133  id  arr 
i:134  DeMark  : 
i:135  keyword  array 
i:136  DeMark  [ 
i:137  num  0 
i:138  Sub_D_Mark  .. 
i:139  num  15000 
i:140  DeMark  ] 
i:141  keyword  of 
i:142  keyword  integer 
i:143  DeMark  ; 
i:144  id  mid 
i:145  DeMark  : 
i:146  keyword  integer 
i:147  DeMark  ; 
i:148  id  ans 
i:149  DeMark  : 
i:150  keyword  real 
i:151  DeMark  ; 
i:152  id  xx 
i:153  DeMark  , 
i:154  id  yy 
i:155  DeMark  , 
i:156  id  modnum 
i:157  DeMark  : 
i:158  keyword  integer 
i:159  DeMark  ; 
i:160  keyword  procedure 
i:161  id  outaval 
i:162  DeMark  ; 
i:163  keyword  begin 
i:164  id  m 
i:165  assignop  := 
i:166  num  5 
i:167  DeMark  ; 
i:168  id  write 
i:169  DeMark  ( 
i:170  id  m 
i:171  DeMark  ) 
i:172  keyword  end 
i:173  DeMark  ; 
i:174  keyword  procedure 
i:175  id  newaval 
i:176  DeMark  ; 
i:177  keyword  var 
i:178  id  m 
i:179  DeMark  : 
i:180  keyword  integer 
i:181  DeMark  ; 
i:182  id  test 
i:183  DeMark  : 
i:184  keyword  real 
i:185  DeMark  ; 
i:186  keyword  begin 
i:187  id  test 
i:188  assignop  := 
i:189  num  6.6 
i:190  DeMark  ; 
i:191  id  m 
i:192  assignop  := 
i:193  num  5 
i:194  mulop  and 
i:195  num  5 
i:196  DeMark  ; 
i:197  id  write 
i:198  DeMark  ( 
i:199  id  m 
i:200  DeMark  ) 
i:201  DeMark  ; 
i:202  id  outaval 
i:203  keyword  end 
i:204  DeMark  ; 
i:205  keyword  procedure 
i:206  id  addaval 
i:207  DeMark  ; 
i:208  keyword  begin 
i:209  id  m 
i:210  assignop  := 
i:211  id  m 
i:212  mulop  * 
i:213  num  5 
i:214  addop  + 
i:215  num  11 
i:216  DeMark  ; 
i:217  id  outaval 
i:218  keyword  end 
i:219  DeMark  ; 
i:220  keyword  function 
i:221  id  test1 
i:222  DeMark  ( 
i:223  id  h 
i:224  DeMark  : 
i:225  keyword  integer 
i:226  DeMark  ; 
i:227  id  hh 
i:228  DeMark  : 
i:229  keyword  char 
i:230  DeMark  ; 
i:231  id  hhh 
i:232  DeMark  : 
i:233  keyword  Boolean 
i:234  DeMark  ) 
i:235  DeMark  : 
i:236  keyword  integer 
i:237  DeMark  ; 
i:238  keyword  function 
i:239  id  test2 
i:240  DeMark  : 
i:241  keyword  integer 
i:242  DeMark  ; 
i:243  keyword  begin 
i:244  keyword  end 
i:245  DeMark  ; 
i:246  keyword  begin 
i:247  id  h 
i:248  assignop  := 
i:249  id  h 
i:250  addop  + 
i:251  num  1 
i:252  keyword  end 
i:253  DeMark  ; 
i:254  keyword  procedure 
i:255  id  test3 
i:256  DeMark  ( 
i:257  keyword  var 
i:258  id  h 
i:259  DeMark  : 
i:260  keyword  integer 
i:261  DeMark  ; 
i:262  keyword  var 
i:263  id  hh 
i:264  DeMark  : 
i:265  keyword  char 
i:266  DeMark  ) 
i:267  DeMark  ; 
i:268  keyword  begin 
i:269  id  h 
i:270  assignop  := 
i:271  num  12345 
i:272  DeMark  ; 
i:273  id  hh 
i:274  assignop  := 
i:275  S_DeMark  ' 
i:276  letter  z 
i:277  S_DeMark  ' 
i:278  keyword  end 
i:279  DeMark  ; 
i:280  keyword  function 
i:281  id  partition 
i:282  DeMark  ( 
i:283  id  l 
i:284  DeMark  : 
i:285  keyword  integer 
i:286  DeMark  ; 
i:287  id  r 
i:288  DeMark  : 
i:289  keyword  integer 
i:290  DeMark  ) 
i:291  DeMark  : 
i:292  keyword  integer 
i:293  DeMark  ; 
i:294  keyword  var 
i:295  id  i 
i:296  DeMark  , 
i:297  id  j 
i:298  DeMark  , 
i:299  id  val 
i:300  DeMark  , 
i:301  id  t 
i:302  DeMark  : 
i:303  keyword  integer 
i:304  DeMark  ; 
i:305  keyword  begin 
i:306  id  i 
i:307  assignop  := 
i:308  id  l 
i:309  addop  + 
i:310  num  1 
i:311  DeMark  ; 
i:312  id  j 
i:313  assignop  := 
i:314  id  r 
i:315  DeMark  ; 
i:316  id  val 
i:317  assignop  := 
i:318  id  arr 
i:319  DeMark  [ 
i:320  id  l 
i:321  DeMark  ] 
i:322  DeMark  ; 
i:323  id  writeln 
i:324  DeMark  ; 
i:325  keyword  repeat 
i:326  keyword  while 
i:327  DeMark  ( 
i:328  DeMark  ( 
i:329  id  arr 
i:330  DeMark  [ 
i:331  id  i 
i:332  DeMark  ] 
i:333  relop  < 
i:334  id  val 
i:335  DeMark  ) 
i:336  mulop  and 
i:337  DeMark  ( 
i:338  id  i 
i:339  relop  <= 
i:340  id  j 
i:341  DeMark  ) 
i:342  DeMark  ) 
i:343  keyword  do 
i:344  id  i 
i:345  assignop  := 
i:346  id  i 
i:347  addop  + 
i:348  num  1 
i:349  DeMark  ; 
i:350  keyword  while 
i:351  DeMark  ( 
i:352  DeMark  ( 
i:353  id  arr 
i:354  DeMark  [ 
i:355  id  j 
i:356  DeMark  ] 
i:357  relop  > 
i:358  id  val 
i:359  DeMark  ) 
i:360  mulop  and 
i:361  DeMark  ( 
i:362  id  i 
i:363  relop  <= 
i:364  id  j 
i:365  DeMark  ) 
i:366  DeMark  ) 
i:367  keyword  do 
i:368  id  j 
i:369  assignop  := 
i:370  id  j 
i:371  addop  - 
i:372  num  1 
i:373  DeMark  ; 
i:374  keyword  if 
i:375  keyword  not 
i:376  DeMark  ( 
i:377  id  i 
i:378  relop  > 
i:379  id  j 
i:380  DeMark  ) 
i:381  keyword  then 
i:382  keyword  begin 
i:383  id  t 
i:384  assignop  := 
i:385  id  arr 
i:386  DeMark  [ 
i:387  id  i 
i:388  DeMark  ] 
i:389  DeMark  ; 
i:390  id  arr 
i:391  DeMark  [ 
i:392  id  i 
i:393  DeMark  ] 
i:394  assignop  := 
i:395  id  arr 
i:396  DeMark  [ 
i:397  id  j 
i:398  DeMark  ] 
i:399  DeMark  ; 
i:400  id  arr 
i:401  DeMark  [ 
i:402  id  j 
i:403  DeMark  ] 
i:404  assignop  := 
i:405  id  t 
i:406  DeMark  ; 
i:407  id  i 
i:408  assignop  := 
i:409  id  i 
i:410  addop  + 
i:411  num  1 
i:412  DeMark  ; 
i:413  id  j 
i:414  assignop  := 
i:415  id  j 
i:416  addop  - 
i:417  num  1 
i:418  keyword  end 
i:419  DeMark  ; 
i:420  keyword  until 
i:421  id  i 
i:422  relop  > 
i:423  id  j 
i:424  DeMark  ; 
i:425  id  t 
i:426  assignop  := 
i:427  id  arr 
i:428  DeMark  [ 
i:429  id  l 
i:430  DeMark  ] 
i:431  DeMark  ; 
i:432  id  arr 
i:433  DeMark  [ 
i:434  id  l 
i:435  DeMark  ] 
i:436  assignop  := 
i:437  id  arr 
i:438  DeMark  [ 
i:439  id  j 
i:440  DeMark  ] 
i:441  DeMark  ; 
i:442  id  arr 
i:443  DeMark  [ 
i:444  id  j 
i:445  DeMark  ] 
i:446  assignop  := 
i:447  id  t 
i:448  DeMark  ; 
i:449  id  partition 
i:450  assignop  := 
i:451  id  j 
i:452  keyword  end 
i:453  DeMark  ; 
i:454  keyword  procedure 
i:455  id  quickasort 
i:456  DeMark  ( 
i:457  id  l 
i:458  DeMark  : 
i:459  keyword  integer 
i:460  DeMark  ; 
i:461  id  r 
i:462  DeMark  : 
i:463  keyword  integer 
i:464  DeMark  ) 
i:465  DeMark  ; 
i:466  keyword  var 
i:467  id  pos 
i:468  DeMark  : 
i:469  keyword  integer 
i:470  DeMark  ; 
i:471  keyword  begin 
i:472  keyword  if 
i:473  id  l 
i:474  relop  < 
i:475  id  r 
i:476  keyword  then 
i:477  keyword  begin 
i:478  id  pos 
i:479  assignop  := 
i:480  id  partition 
i:481  DeMark  ( 
i:482  id  l 
i:483  DeMark  , 
i:484  id  r 
i:485  DeMark  ) 
i:486  DeMark  ; 
i:487  id  quickasort 
i:488  DeMark  ( 
i:489  id  l 
i:490  DeMark  , 
i:491  id  pos 
i:492  addop  - 
i:493  num  1 
i:494  DeMark  ) 
i:495  DeMark  ; 
i:496  id  quickasort 
i:497  DeMark  ( 
i:498  id  pos 
i:499  addop  + 
i:500  num  1 
i:501  DeMark  , 
i:502  id  r 
i:503  DeMark  ) 
i:504  keyword  end 
i:505  keyword  end 
i:506  DeMark  ; 
i:507  keyword  function 
i:508  id  quickpow 
i:509  DeMark  ( 
i:510  id  p 
i:511  DeMark  , 
i:512  id  q 
i:513  DeMark  : 
i:514  keyword  integer 
i:515  DeMark  ) 
i:516  DeMark  : 
i:517  keyword  integer 
i:518  DeMark  ; 
i:519  keyword  var 
i:520  id  res 
i:521  DeMark  : 
i:522  keyword  integer 
i:523  DeMark  ; 
i:524  keyword  begin 
i:525  id  res 
i:526  assignop  := 
i:527  num  1 
i:528  DeMark  ; 
i:529  keyword  while 
i:530  id  q 
i:531  relop  <> 
i:532  num  0 
i:533  keyword  do 
i:534  keyword  begin 
i:535  keyword  if 
i:536  id  q 
i:537  mulop  mod 
i:538  num  2 
i:539  relop  = 
i:540  num  1 
i:541  keyword  then 
i:542  id  res 
i:543  assignop  := 
i:544  id  res 
i:545  mulop  * 
i:546  id  p 
i:547  DeMark  ; 
i:548  id  p 
i:549  assignop  := 
i:550  id  p 
i:551  mulop  * 
i:552  id  p 
i:553  DeMark  ; 
i:554  id  p 
i:555  assignop  := 
i:556  id  p 
i:557  mulop  mod 
i:558  id  modnum 
i:559  DeMark  ; 
i:560  id  res 
i:561  assignop  := 
i:562  id  res 
i:563  mulop  mod 
i:564  id  modnum 
i:565  DeMark  ; 
i:566  id  q 
i:567  assignop  := 
i:568  id  q 
i:569  mulop  div 
i:570  num  2 
i:571  keyword  end 
i:572  DeMark  ; 
i:573  id  quickpow 
i:574  assignop  := 
i:575  id  res 
i:576  keyword  end 
i:577  DeMark  ; 
i:578  keyword  function 
i:579  id  gcd 
i:580  DeMark  ( 
i:581  id  x 
i:582  DeMark  , 
i:583  id  y 
i:584  DeMark  : 
i:585  keyword  integer 
i:586  DeMark  ) 
i:587  DeMark  : 
i:588  keyword  integer 
i:589  DeMark  ; 
i:590  keyword  var 
i:591  id  r 
i:592  DeMark  : 
i:593  keyword  integer 
i:594  DeMark  ; 
i:595  keyword  begin 
i:596  id  r 
i:597  assignop  := 
i:598  id  x 
i:599  mulop  mod 
i:600  id  y 
i:601  DeMark  ; 
i:602  keyword  while 
i:603  id  r 
i:604  relop  <> 
i:605  num  0 
i:606  keyword  do 
i:607  keyword  begin 
i:608  id  x 
i:609  assignop  := 
i:610  id  y 
i:611  DeMark  ; 
i:612  id  y 
i:613  assignop  := 
i:614  id  r 
i:615  DeMark  ; 
i:616  id  r 
i:617  assignop  := 
i:618  id  x 
i:619  mulop  mod 
i:620  id  y 
i:621  keyword  end 
i:622  DeMark  ; 
i:623  id  gcd 
i:624  assignop  := 
i:625  id  y 
i:626  keyword  end 
i:627  DeMark  ; 
i:628  keyword  begin 
i:629  keyword  begin 
i:630  id  outaval 
i:631  keyword  end 
i:632  DeMark  ; 
i:633  id  r 
i:634  DeMark  . 
i:635  id  a 
i:636  assignop  := 
i:637  num  3 
i:638  DeMark  ; 
i:639  id  write 
i:640  DeMark  ( 
i:641  id  r 
i:642  DeMark  . 
i:643  id  b 
i:644  DeMark  [ 
i:645  num  1 
i:646  DeMark  , 
i:647  num  2 
i:648  DeMark  ] 
i:649  DeMark  . 
i:650  id  a 
i:651  DeMark  ) 
i:652  DeMark  ; 
i:653  id  write 
i:654  DeMark  ( 
i:655  id  r 
i:656  DeMark  . 
i:657  id  a 
i:658  DeMark  ) 
i:659  DeMark  ; 
i:660  id  ch 
i:661  assignop  := 
i:662  S_DeMark  ' 
i:663  letter  a 
i:664  S_DeMark  ' 
i:665  DeMark  ; 
i:666  id  ch2 
i:667  assignop  := 
i:668  S_DeMark  ' 
i:669  letter  b 
i:670  S_DeMark  ' 
i:671  DeMark  ; 
i:672  id  int 
i:673  assignop  := 
i:674  num  2 
i:675  DeMark  ; 
i:676  id  rea 
i:677  assignop  := 
i:678  num  2.5 
i:679  DeMark  ; 
i:680  id  write 
i:681  DeMark  ( 
i:682  id  ch 
i:683  relop  > 
i:684  id  ch2 
i:685  DeMark  ) 
i:686  DeMark  ; 
i:687  id  write 
i:688  DeMark  ( 
i:689  id  int 
i:690  relop  > 
i:691  id  rea 
i:692  DeMark  ) 
i:693  DeMark  ; 
i:694  id  write 
i:695  DeMark  ( 
i:696  id  int 
i:697  relop  > 
i:698  id  int 
i:699  DeMark  ) 
i:700  DeMark  ; 
i:701  id  writeln 
i:702  DeMark  ; 
i:703  id  writeln 
i:704  DeMark  ; 
i:705  id  writeln 
i:706  DeMark  ( 
i:707  id  m 
i:708  DeMark  ) 
i:709  DeMark  ; 
i:710  id  test1 
i:711  DeMark  ( 
i:712  id  m 
i:713  DeMark  , 
i:714  id  ch 
i:715  DeMark  , 
i:716  id  int 
i:717  relop  > 
i:718  id  rea 
i:719  DeMark  ) 
i:720  DeMark  ; 
i:721  id  writeln 
i:722  DeMark  ( 
i:723  id  m 
i:724  DeMark  ) 
i:725  DeMark  ; 
i:726  id  test3 
i:727  DeMark  ( 
i:728  id  m 
i:729  DeMark  , 
i:730  id  ch 
i:731  DeMark  ) 
i:732  DeMark  ; 
i:733  id  writeln 
i:734  DeMark  ( 
i:735  id  m 
i:736  DeMark  ) 
i:737  DeMark  ; 
i:738  id  writeln 
i:739  DeMark  ( 
i:740  id  ch 
i:741  DeMark  ) 
i:742  DeMark  ; 
i:743  keyword  for 
i:744  id  i 
i:745  assignop  := 
i:746  num  1 
i:747  keyword  to 
i:748  num  10 
i:749  keyword  do 
i:750  keyword  begin 
i:751  keyword  for 
i:752  id  j 
i:753  assignop  := 
i:754  num  3 
i:755  keyword  downto 
i:756  num  2 
i:757  keyword  do 
i:758  keyword  begin 
i:759  id  write 
i:760  DeMark  ( 
i:761  id  i 
i:762  DeMark  ) 
i:763  keyword  end 
i:764  keyword  end 
i:765  DeMark  ; 
i:766  id  writeln 
i:767  DeMark  ; 
i:768  id  writeln 
i:769  DeMark  ( 
i:770  id  i 
i:771  DeMark  ) 
i:772  DeMark  ; 
i:773  id  writeln 
i:774  DeMark  ( 
i:775  id  j 
i:776  DeMark  ) 
i:777  DeMark  ; 
i:778  id  outaval 
i:779  DeMark  ; 
i:780  id  newaval 
i:781  DeMark  ; 
i:782  id  addaval 
i:783  DeMark  ; 
i:784  id  writeln 
i:785  DeMark  ; 
i:786  id  newaval 
i:787  DeMark  ; 
i:788  id  outaval 
i:789  DeMark  ; 
i:790  id  addaval 
i:791  DeMark  ; 
i:792  id  writeln 
i:793  DeMark  ; 
i:794  id  write 
i:795  DeMark  ; 
i:796  id  rea 
i:797  assignop  := 
i:798  num  3 
i:799  DeMark  ; 
i:800  keyword  case 
i:801  id  int 
i:802  keyword  of 
i:803  num  1 
i:804  DeMark  : 
i:805  id  write 
i:806  DeMark  ( 
i:807  num  12 
i:808  DeMark  ) 
i:809  DeMark  ; 
i:810  num  2 
i:811  DeMark  : 
i:812  id  write 
i:813  DeMark  ( 
i:814  num  23 
i:815  DeMark  ) 
i:816  DeMark  ; 
i:817  num  3 
i:818  DeMark  , 
i:819  num  4 
i:820  DeMark  : 
i:821  id  write 
i:822  DeMark  ( 
i:823  num  34 
i:824  DeMark  ) 
i:825  keyword  end 
i:826  DeMark  ; 
i:827  keyword  if 
i:828  num  1 
i:829  relop  = 
i:830  num  1 
i:831  keyword  then 
i:832  id  write 
i:833  DeMark  ( 
i:834  num  111 
i:835  DeMark  ) 
i:836  DeMark  ; 
i:837  id  i 
i:838  assignop  := 
i:839  num  10 
i:840  DeMark  ; 
i:841  keyword  while 
i:842  id  i 
i:843  relop  >= 
i:844  num  0 
i:845  keyword  do 
i:846  keyword  begin 
i:847  id  write 
i:848  DeMark  ( 
i:849  num  111 
i:850  DeMark  ) 
i:851  DeMark  ; 
i:852  id  i 
i:853  assignop  := 
i:854  id  i 
i:855  addop  - 
i:856  num  1 
i:857  keyword  end 
i:858  DeMark  ; 
i:859  id  i 
i:860  assignop  := 
i:861  num  1 
i:862  DeMark  ; 
i:863  id  int2 
i:864  assignop  := 
i:865  num  0 
i:866  DeMark  ; 
i:867  keyword  repeat 
i:868  id  i 
i:869  assignop  := 
i:870  id  i 
i:871  addop  + 
i:872  num  1 
i:873  DeMark  ; 
i:874  id  writeln 
i:875  DeMark  ( 
i:876  id  i 
i:877  DeMark  ) 
i:878  DeMark  ; 
i:879  keyword  if 
i:880  id  i 
i:881  relop  = 
i:882  num  10 
i:883  keyword  then 
i:884  id  int2 
i:885  assignop  := 
i:886  num  1 
i:887  keyword  until 
i:888  id  int2 
i:889  relop  = 
i:890  num  1 
i:891  DeMark  ; 
i:892  id  test4 
i:893  DeMark  [ 
i:894  S_DeMark  ' 
i:895  letter  a 
i:896  S_DeMark  ' 
i:897  DeMark  ] 
i:898  assignop  := 
i:899  num  22222222 
i:900  DeMark  ; 
i:901  id  write 
i:902  DeMark  ( 
i:903  id  test4 
i:904  DeMark  [ 
i:905  S_DeMark  ' 
i:906  letter  a 
i:907  S_DeMark  ' 
i:908  DeMark  ] 
i:909  DeMark  ) 
i:910  DeMark  ; 
i:911  id  i 
i:912  assignop  := 
i:913  signal  - 
i:914  num  5 
i:915  DeMark  ; 
i:916  id  j 
i:917  assignop  := 
i:918  signal  + 
i:919  id  i 
i:920  DeMark  ; 
i:921  id  write 
i:922  DeMark  ( 
i:923  id  j 
i:924  DeMark  ) 
i:925  DeMark  ; 
i:926  id  writeln 
i:927  DeMark  ; 
i:928  id  read 
i:929  DeMark  ( 
i:930  id  xx 
i:931  DeMark  ) 
i:932  DeMark  ; 
i:933  id  read 
i:934  DeMark  ( 
i:935  id  yy 
i:936  DeMark  ) 
i:937  DeMark  ; 
i:938  id  read 
i:939  DeMark  ( 
i:940  id  modnum 
i:941  DeMark  ) 
i:942  DeMark  ; 
i:943  id  writeln 
i:944  DeMark  ( 
i:945  id  quickpow 
i:946  DeMark  ( 
i:947  id  xx 
i:948  DeMark  , 
i:949  id  yy 
i:950  DeMark  ) 
i:951  DeMark  ) 
i:952  DeMark  ; 
i:953  id  read 
i:954  DeMark  ( 
i:955  id  xx 
i:956  DeMark  ) 
i:957  DeMark  ; 
i:958  id  read 
i:959  DeMark  ( 
i:960  id  yy 
i:961  DeMark  ) 
i:962  DeMark  ; 
i:963  id  writeln 
i:964  DeMark  ( 
i:965  id  gcd 
i:966  DeMark  ( 
i:967  id  xx 
i:968  DeMark  , 
i:969  id  yy 
i:970  DeMark  ) 
i:971  DeMark  ) 
i:972  DeMark  ; 
i:973  id  read 
i:974  DeMark  ( 
i:975  id  n 
i:976  DeMark  ) 
i:977  DeMark  ; 
i:978  keyword  while 
i:979  id  n 
i:980  relop  <> 
i:981  num  0 
i:982  keyword  do 
i:983  keyword  begin 
i:984  keyword  for 
i:985  id  i 
i:986  assignop  := 
i:987  num  1 
i:988  keyword  to 
i:989  id  n 
i:990  keyword  do 
i:991  keyword  begin 
i:992  id  read 
i:993  DeMark  ( 
i:994  id  arr 
i:995  DeMark  [ 
i:996  id  i 
i:997  DeMark  ] 
i:998  DeMark  ) 
i:999  keyword  end 
i:1000  DeMark  ; 
i:1001  id  quickasort 
i:1002  DeMark  ( 
i:1003  num  1 
i:1004  DeMark  , 
i:1005  id  n 
i:1006  DeMark  ) 
i:1007  DeMark  ; 
i:1008  keyword  for 
i:1009  id  i 
i:1010  assignop  := 
i:1011  num  1 
i:1012  keyword  to 
i:1013  id  n 
i:1014  keyword  do 
i:1015  keyword  if 
i:1016  id  i 
i:1017  relop  <= 
i:1018  id  n 
i:1019  keyword  then 
i:1020  id  writeln 
i:1021  DeMark  ( 
i:1022  id  arr 
i:1023  DeMark  [ 
i:1024  id  i 
i:1025  DeMark  ] 
i:1026  DeMark  ) 
i:1027  DeMark  ; 
i:1028  id  writeln 
i:1029  DeMark  ; 
i:1030  id  read 
i:1031  DeMark  ( 
i:1032  id  n 
i:1033  DeMark  ) 
i:1034  keyword  end 
i:1035  keyword  end 
i:1036  DeMark  . 
